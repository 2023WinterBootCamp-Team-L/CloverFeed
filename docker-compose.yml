# 개발용 docker-compose 파일
# 실행 방법: sudo docker compose up --build
version: "3.8"
services:

  db:
    container_name: mysql
    image: mysql:8.0
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # .env 파일에서 가져옴
      MYSQL_DATABASE: ${MYSQL_DATABASE}  # .env 파일에서 가져옴
      MYSQL_USER: ${MYSQL_USER}  # .env 파일에서 가져옴
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  # .env 파일에서 가져옴
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - django-network
    healthcheck:
      test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD']
      interval: 5s
      timeout: 2s
      retries: 100

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DJANGO_DEBUG: "True"
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8000:8000"
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/backend
    networks:
      - django-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      # :을 기준으로 왼쪽은 빌드 이전의 로컬 폴더 오른쪽은 컨테이너 내부의 폴더
      - ./frontend:/app
      - /app/node_modules
      - build_folder:/app/dist  # 빌드 디렉토리를 볼륨으로 마운트

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
    ports:
      - 9090:9090
    depends_on:
      - cadvisor
      - alertmanager 
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'  # 수정: 띄어쓰기 추가
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console-libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: always  # 수정: 항상 다시 시작
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: cadvisor
    devices:
      - "/dev/kmsg:/dev/kmsg"
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - django-network

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager/:/etc/alertmanager/
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

volumes:
  mysql_data:
  build_folder:
    name: build_folder
    driver: local

networks:
  django-network:
